/////////////////////// Command Code ////////////////////////////////////////
public interface RegisterCommand {
    public void execute(String s, int quantity);
}

public class SaleCommand implements RegisterCommand {
    Transactions transaction;
    public SaleCommand(Transactions transaction){
        this.transaction = transaction;
    }
    public void execute(String s, int quantity){
        transaction.sell(s,quantity);
    }
    
}

public class RefundCommand implements RegisterCommand{
    Transactions transaction;
    public RefundCommand(Transactions transaction){
        this.transaction = transaction;
    }
    public void execute(){
        transaction.refund();
    }
}
import java.util.*;

public class Register {
    RegisterCommand input;
    static double price;
    public Register(){

    }
    public void setCommand(RegisterCommand command){

        input = command;
    }

    public static double getPrice() {
        Random rand = new Random();
        price = 50 + (int)(Math.random() * ((1000 - 50) + 1));
        return price;
    }
    public void setPrice(double price){
        this.price = price;
    }

public class Transactions {
    double price;
    public void sell(String s, int quantity){
        this.price =  Register.getPrice();
        People.add(s,quantity);
        System.out.println("The "+ s+" has been sold for "+ price);
    }

    
}
public class Transactions {
    public void sell(){
        System.out.println("A sale has been made");
    }
    public void refund(){
        System.out.println("A refund has been made");
    }
    
}

public class TestRegister {
    public static void main(String[] args){
        Register reggie = new Register();
        Transactions t = new Transactions();
        SaleCommand s = new SaleCommand(t);
        RefundCommand r = new RefundCommand(t);
        reggie.setCommand(s);
        reggie.buttonWasPressed();
        reggie.setCommand(r);
        reggie.buttonWasPressed();
    }
    
}
/////////////////////// Decorator Code ////////////////////////////////////////
abstract class Device {
    String description = "Unknown item";
    public String getDescription(){
        return description;
    }
    public abstract String getAdditionalInfo();
    
}
abstract class AddOn extends Device {
        public abstract String getAdditionalInfo();
    }
    
public class Laptop extends Device{
    public Laptop(){
        description = "The Dell XPS 15 is our new pick for the best laptop of 2020. Dell's 2020 update to its 15-inch"+ 
        "flagship ticks pretty much every box when it comes to what we want from a laptop";
    }
    public String getAdditionalInfo(){
        return "\n"+"This laptop has phenomenal battery life";
    }
    
}
public class PS5 extends Device{
    public PS5(){
        description = "The PS5 (or PlayStation 5) is Sony's long-awaited next-generation console."+
        " It costs $499.99 / Â£449.99 / AU$749.95 and will be available from November 12, 2020"+
        " (in select markets such as the US and Japan) and November 19, 2020 for the rest of the world, including the UK.";
    }
    public String getAdditionalInfo(){
        return "\n"+"The PS5 comes with 825 GB SSD";
    }
}
class ProtectionPlan extends AddOn {
    Device device;
    public ProtectionPlan(Device device){
        this.device = device;
    }
    public String getDescription(){
        //2
        return device.getDescription() + "\n\nThis laptop comes with a protection plan";
    }
    public String getAdditionalInfo(){
        return device.getAdditionalInfo() + ".\nThe protection plan will guarantee a replacement if"+
        " broken or damaged";
    }
}
import java.util.*;

public class People {
    static List<Object> x = new ArrayList<Object>();
    int quantity;
    String firstname, lastname, email,address,password,billingAddress,shippingAddress,username;

    public People(String arr[]){
        this.firstname = arr[0];
        this.lastname = arr[1];
        this.email = arr[2];
        this.address = arr[3];
        this.password = arr[4];
        this.billingAddress = arr[5];
        this.shippingAddress=arr[6];
        this.username = arr[7];
    }

    public static void add(String s, int quantity){
        x.add(s);
        x.add(quantity);
    }
    public void remove (String s, int quantity){
        for(int i = 0; i<x.size();i+=2) {
            if(x.get(i).equals(s)) {
                int q = (int) x.get(i + 1);
                q -= quantity;
                i=i+1;

            }
        }
    }
    public String getFirstname(){
        return firstname;
    }
    public String getLastnamename(){
        return lastname;
    }
    public String getEmail(){
        return email;
    }
    public String getAddress(){
        return address;
    }
    public String getPassword(){
        return password;
    }
    public String getBillingAddress(){
        return billingAddress;
    }
    public String getShippingAddress(){
        return shippingAddress;
    }
    public String getUsername(){
        return username;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public void setBillingAddress(String billingAddress) {
        this.billingAddress = billingAddress;
    }
    public void setShippingAddress(String shippingAddress) {
        this.shippingAddress = shippingAddress;
    }
    public void setUsername(String username) {
        this.username = username;
    }

    public void printItems(){
        for(int i=0;i<x.size();i+=2){
            System.out.print(x.get(i));
            System.out.print(" "+x.get(i+1)+"\n");
        }
    }
    
}

public class TechStore {
    public static void main(String[] args){
        Device d1 = new Laptop();
        Device d2 = new PS5();
        People Kosi = new People();
        Kosi.add(d1);
        Kosi.add(d2);
        Kosi.add(d1);
        Kosi.add(d1);
        Kosi.add(d1);
        Kosi.displayItems();
    }
    
}

/////////////////////// Observer Code ////////////////////////////////////////
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

public class NotifyTransactions {
    public static final String FIRSTNAME = "firstName";

    private List<Amount> Amounts = new ArrayList<Amount>();
    private List<PropertyChangeListener> listener = new ArrayList<PropertyChangeListener>();

    public class Amount {

        private double money;


        public Amount(double money) {
            this.money = money;
        }

        public double getMoney() {

            return money;
        }

        public void setMoney(double money) {
            notifyListeners(this,"Money",this.money,this.money = money);

        }

    }

    public List<Amount> getAmounts() {
        return Amounts;
    }

    public NotifyTransactions() {
        // just for testing we hard-code the persons here:
        Amounts.add(new Amount(50.00));
    }

    private void notifyListeners(Object object, String property, double oldValue, double newValue) {
        for (PropertyChangeListener name : listener) {
            name.propertyChange(new PropertyChangeEvent(this, property, oldValue, newValue));
        }
    }

    public void addChangeListener(PropertyChangeListener newListener) {
        listener.add(newListener);
    }

}
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class StoreObserver implements PropertyChangeListener {
    public StoreObserver(NotifyTransactions model) {
        model.addChangeListener(this);
    }

    public void propertyChange(PropertyChangeEvent event) {
        System.out.println( "Before Transaction: "+ event.getOldValue() +"\n"+ "After Transaction: " 
        + event.getNewValue());
    }
}
public class test {
    public static void main(String[] args){
        NotifyTransactions T = new NotifyTransactions();
        StoreObserver s = new StoreObserver(T);
        // we set the amount that each customer has, The observer will be notified
        for (NotifyTransactions.Amount amount : T.getAmounts()) {
            amount.setMoney(amount.getMoney() + 110.00);
        }
    }
    
}
/////////////////////// Facade Code //////////////////////////////////////// TBD:

