/////////////////////// Command Code ////////////////////////////////////////
public interface RegisterCommand {
    public void execute(String s, int quantity);
}


public class SaleCommand implements RegisterCommand {
    Transactions transaction;
    public SaleCommand(Transactions transaction){
        this.transaction = transaction;
    }
    public void execute(String s, int quantity){
        transaction.sell(s,quantity);
    }
    
}

import java.util.*;

public class Register {
    RegisterCommand input;
    static double price;

    public void setCommand(RegisterCommand command){

        input = command;
    }

    public static double getPrice() {
        return price;
    }
    public void setPrice(double price){
        this.price = price;
    }

    public void processTransaction(String item, int quantity){

        input.execute(item,quantity);
    }
}


public class Transactions {
    double price;
    public String sell(String s, int quantity){
        this.price =  Register.getPrice();
        People.add(s,quantity);
        return "The "+ s+" has been sold for "+ price;
    }

}



/////////////////////// Decorator Code ////////////////////////////////////////
abstract class Device {
    String description = "Unknown item";
    public String getDescription(){
        return description;
    }
    public abstract String getAdditionalInfo(String s);
    
}
abstract class AddOn extends Device {
        public abstract String getAdditionalInfo(String s);
    }
    
import java.util.ArrayList;

public class Devices extends Device{
    public ArrayList<String>arr = new ArrayList<String>();

    public Devices(String s){
        arr.add(s);
        for(int i=0;i<arr.size();i++){
            if (s.equals(arr.get(i))){
               System.out.println(statement(s));
            }
        }

    }

    public String getAdditionalInfo(String s){

        return "This "+s+" is one of our best selling products";
    }
    public String statement(String s){
        return "This "+s+" will be a wonderful addition to your home";
    }
    
}


class ProtectionPlan extends AddOn {
    Device device;
    public ProtectionPlan(Device device){
        this.device = device;
    }

    public String getAdditionalInfo(String s){
        return device.getAdditionalInfo(s) + ".\nThe protection plan will guarantee a replacement if"+
        " broken or damaged";
    }
}

import java.util.*;
public class People {
    static HashMap<String, Integer> map = new HashMap<String,Integer>();
    int quantity;
    String firstname, lastname, email,address,password,billingAddress,shippingAddress,username;

    public People(String arr[]){
        this.firstname = arr[0];
        this.lastname = arr[1];
        this.email = arr[2];
        this.address = arr[3];
        this.password = arr[4];
        this.billingAddress = arr[5];
        this.shippingAddress=arr[6];
        this.username = arr[7];
    }
    public static void add(String s, int quantity){
        if(map.containsKey(s)) {
            int newQuantity = quantity+map.get(s);
            map.put(s,newQuantity);
        }
        else{
            map.put(s, quantity);
        }
    }
    public static void remove (String s, int quantity){
        int q = map.get(s);
        if(q>quantity){
            map.replace(s,q-quantity);
        }
        else{
            map.remove(s);
        }

    }
    public void printItems() {
        System.out.println(map);
    }
    public String getFirstname(){
        return firstname;
    }
    public String getLastnamename(){
        return lastname;
    }
    public String getEmail(){
        return email;
    }
    public String getAddress(){
        return address;
    }
    public String getPassword(){
        return password;
    }
    public String getBillingAddress(){
        return billingAddress;
    }
    public String getShippingAddress(){
        return shippingAddress;
    }
    public String getUsername(){
        return username;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public void setBillingAddress(String billingAddress) {
        this.billingAddress = billingAddress;
    }
    public void setShippingAddress(String shippingAddress) {
        this.shippingAddress = shippingAddress;
    }
    public void setUsername(String username) {
        this.username = username;
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Guest extends People {
    static HashMap<String, Integer> map = new HashMap<String,Integer>();

    public Guest(String[] arr) {
        super(arr);
    }

    public static void add(String s, int quantity){
        if(map.containsKey(s)) {
            int newQuantity = quantity+map.get(s);
            map.put(s,newQuantity);
        }
        else{
            map.put(s, quantity);
        }
    }
    public static void remove (String s, int quantity){
        int q = map.get(s);
        if(q>quantity){
            map.replace(s,q-quantity);
        }
        else{
            map.remove(s);
        }

    }
    public void printItems() {
        System.out.println(map);
    }
}


/////////////////////// Observer Code ////////////////////////////////////////
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

public class NotifyTransactions {
    public static final String FIRSTNAME = "firstName";
    private List<Amount> Amounts = new ArrayList<Amount>();
    private List<PropertyChangeListener> listener = new ArrayList<PropertyChangeListener>();
    static double value = 2842020;
    public class Amount {
        private double money;
        public Amount(double money) {
            this.money = money;
        }

        public double getMoney() {
            return money;
        }

        public void setMoney(double money) {
            notifyListeners(this,"Money",this.money,this.money = money);
        }

    }

    public List<Amount> getAmounts() {
        return Amounts;
    }
    public void setValue(double value) {
    this.value = value;
    }
    public double getValue() {
    return value;
    }


    public NotifyTransactions() {
        Amounts.add(new Amount(value));
    }

    private void notifyListeners(Object object, String property, double oldValue, double newValue) {
        for (PropertyChangeListener name : listener) {
            name.propertyChange(new PropertyChangeEvent(this, property, oldValue, newValue));
        }
       this.value = newValue;
    }

    public void addChangeListener(PropertyChangeListener newListener) {
        listener.add(newListener);
    }

}

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class StoreObserver implements PropertyChangeListener {
    public StoreObserver(NotifyTransactions model) {
        model.addChangeListener(this);
    }

    public void propertyChange(PropertyChangeEvent event) {
        System.out.println( "Before Transaction: "+"$"+event.getOldValue() +"\n"+ "After Transaction: "
        +"$"+event.getNewValue());
    }
}

/////////////////////// Facade Code ////////////////////////////////////////
import java.util.List;

public class StoreFacade {
    private Register r;
    private SaleCommand s;
    private Transactions t;
    private NotifyTransactions nt;
    private StoreObserver so;
    private Device d;
    private NotifyTransactions.Amount a;
    public StoreFacade(){
        r = new Register();
        t = new Transactions();
        s = new SaleCommand(t);
        r.setCommand(s);
        nt = new NotifyTransactions();
        so = new StoreObserver(nt);
        a = nt.new Amount(2842020);
    }
    public void setPrice(double price){
        r.setPrice(price);
    }
    public double getPrice() { return r.getPrice(); }

    public void processTransaction(String item, int quantity){ r.processTransaction(item,quantity); }

    public List<NotifyTransactions.Amount> getAmounts() {
        return nt.getAmounts();
    }
    public void observerTransaction(){
        for (NotifyTransactions.Amount amount : nt.getAmounts()) {
            amount.setMoney(amount.getMoney() - r.getPrice());
            if(amount.getMoney()<0){
                System.out.println("You do not have enough money for this transaction");
                return;
            }
        }
    }
    public void description(String s){
        d = new Devices(s);
    }

}


}


